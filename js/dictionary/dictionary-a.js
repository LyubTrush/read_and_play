// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è
let currentGroupIndex = 0;
let currentWordIndex = 0;
let dictionaryData = null;
let currentViewMode = 'single'; // 'single' –∏–ª–∏ 'all'

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è
async function loadDictionaryData() {
    try {
        console.log ('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è...');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const currentPath = window.location.pathname;
        let dataPath = '../../data/a-words-data.json'; // –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if (currentPath.includes('magic-letter-a')) {
            dataPath = '../../data/a-words-data.json';
        } else if (currentPath.includes('rule-ar')) {
            dataPath = '../../data/ar-words-data.json';
        }
        
        const response = await fetch(dataPath);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        dictionaryData = await response.json();
        console.log('–î–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', dictionaryData);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –≥—Ä—É–ø–ø–∞–º
        createGroupsNavigation();
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É —Å–ª–æ–≤
        showCurrentGroup();
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        setupKeyboardNavigation();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä—è:', error);
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function setupKeyboardNavigation() {
    document.addEventListener('keydown', function(event) {
        // –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        if (currentViewMode !== 'single') return;
        
        switch(event.key) {
            case 'ArrowLeft':
                event.preventDefault();
                prevWord();
                break;
            case 'ArrowRight':
                event.preventDefault();
                nextWord();
                break;
        }
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
function createGroupsNavigation() {
    const groupsNav = document.getElementById('groupsNavigation');
    groupsNav.innerHTML = '';
    
    dictionaryData.levels.forEach((group, index) => {
        const button = document.createElement('button');
        button.className = `group-button ${index === 0 ? 'active' : ''}`;
        button.textContent = group.name;
        button.onclick = () => switchGroup(index);
        groupsNav.appendChild(button);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
function switchGroup(groupIndex) {
    currentGroupIndex = groupIndex;
    currentWordIndex = 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
    document.querySelectorAll('.group-button').forEach((btn, index) => {
        btn.classList.toggle('active', index === groupIndex);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É
    showCurrentGroup();
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É —Å–ª–æ–≤
function showCurrentGroup() {
    if (!dictionaryData || !dictionaryData.levels[currentGroupIndex]) {
        console.error('–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }

    const currentGroup = dictionaryData.levels[currentGroupIndex];
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if (currentViewMode === 'single') {
        showSingleCardView(currentGroup);
    } else {
        showAllCardsView(currentGroup);
    }
}

// –†–µ–∂–∏–º –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function showSingleCardView(currentGroup) {
    const singleView = document.getElementById('singleCardView');
    const allView = document.getElementById('allCardsView');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    singleView.style.display = 'flex';
    allView.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    showCurrentWord(currentGroup);
}

// –†–µ–∂–∏–º –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
function showAllCardsView(currentGroup) {
    const singleView = document.getElementById('singleCardView');
    const allView = document.getElementById('allCardsView');
    const wordsGrid = document.getElementById('wordsGrid');
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å
    singleView.style.display = 'none';
    allView.style.display = 'flex';
    
    // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
    wordsGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
    currentGroup.words.forEach(wordData => {
        const wordCard = createWordCard(wordData, 'grid');
        wordsGrid.appendChild(wordCard);
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ –≤ —Ä–µ–∂–∏–º–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
function showCurrentWord(currentGroup) {
    const wordDisplay = document.getElementById('currentWordDisplay');
    
    if (currentWordIndex >= currentGroup.words.length) {
        currentWordIndex = 0;
    }
    
    const wordData = currentGroup.words[currentWordIndex];
    const wordCard = createWordCard(wordData, 'single');
    
    wordDisplay.innerHTML = '';
    wordDisplay.appendChild(wordCard);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª–æ–≤–∞
function createWordCard(wordData, mode = 'single') {
    const card = document.createElement('div');
    card.className = mode === 'single' ? 'word-card-single' : 'word-card-grid';
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–æ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –±—É–∫–≤—ã A
    const formattedWord = formatWordWithHighlight(wordData.word);
    
    card.innerHTML = `
        <div class="word-image">
            <img src="${wordData.image}" alt="${wordData.lowercase}" 
                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
            <div class="fallback-emoji" style="display: none;">${getEmojiForWord(wordData.lowercase)}</div>
        </div>
        
        <div class="word-english">${formattedWord}</div>
        <div class="word-transcription">${wordData.transcription || '/transcription/'}</div>
        <div class="word-russian">${wordData.translation || '–ø–µ—Ä–µ–≤–æ–¥'}</div>
        
        <button class="sound-button" onclick="playWordSound('${wordData.lowercase}')">
            <img src="../../assets/icon/speaker.png" alt="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
            –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
        </button>
    `;
    
    return card;
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function setViewMode(mode) {
    currentViewMode = mode;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    document.querySelectorAll('.view-button').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[onclick="setViewMode('${mode}')"]`).classList.add('active');
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞
    if (mode === 'single') {
        currentWordIndex = 0;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –≤ –Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    showCurrentGroup();
}

// –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏)
function nextWord() {
    if (currentViewMode !== 'single') return;
    
    const currentGroup = dictionaryData.levels[currentGroupIndex];
    currentWordIndex = (currentWordIndex + 1) % currentGroup.words.length;
    showCurrentWord(currentGroup);
}

// –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏)
function prevWord() {
    if (currentViewMode !== 'single') return;
    
    const currentGroup = dictionaryData.levels[currentGroupIndex];
    currentWordIndex = currentWordIndex === 0 ? currentGroup.words.length - 1 : currentWordIndex - 1;
    showCurrentWord(currentGroup);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –±—É–∫–≤—ã A
function formatWordWithHighlight(word) {
    let result = '';
    const wordToFormat = word.toLowerCase();
    
    for (let i = 0; i < wordToFormat.length; i++) {
        const char = wordToFormat[i];
        if (char === 'a') {
            result += `<span class="sound-a">${word[i] || char}</span>`;
        } else {
            result += word[i] || char;
        }
    }
    
    return result;
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å–ª–æ–≤–∞
function playWordSound(word) {
    console.log(`–í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫: ${word}`);
    
    const wordSound = new Audio(`../assets/audio/words/${word}.wav`);
    wordSound.volume = 0.8;
    
    wordSound.play().catch(e => {
        console.log('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è MP3:', e);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ–≤–∞ (fallback)
function getEmojiForWord(word) {
    const emojiMap = {
        'rat': 'üêÄ', 'mat': 'üß∫', 'hat': 'üé©', 'fat': 'üêñ', 'cat': 'üê±', 'bat': 'ü¶á',
        'dad': 'üë®', 'bad': 'üò†', 'sad': 'üò¢', 'glad': 'üòä', 'bag': 'üéí', 'mag': 'üì∞',
        'flag': 'üö©', 'crab': 'ü¶Ä', 'cab': 'üöï', 'pan': 'üç≥', 'hand': '‚úã', 'land': 'üèùÔ∏è',
        'sand': 'üèñÔ∏è', 'ham': 'üçñ', 'jam': 'üçì', 'lamp': 'üí°', 'black': '‚ö´', 'back': 'üîô',
        'snack': 'üç™'
    };
    return emojiMap[word] || 'üìñ';
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('–°–ª–æ–≤–∞—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadDictionaryData();
    
    console.log('–°–ª–æ–≤–∞—Ä—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üê ‚Üí –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
});

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è HTML
window.playWordSound = playWordSound;
window.nextWord = nextWord;
window.prevWord = prevWord;
window.setViewMode = setViewMode;
window.switchGroup = switchGroup;