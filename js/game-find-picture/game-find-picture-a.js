let currentLevel = 0;
let currentWordIndex = 0;
let score = 0;
let totalWords = 0;
let currentWords = [];
let progressDots = [];
let answers = [];
let currentWordData = null;
let soundEnabled = true;
let gameData = null;

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
async function loadGameData() {
    try {
        const response = await fetch('../../data/a-words-data.json');
        gameData = await response.json();
        console.log('Game data loaded successfully');
    } catch (error) {
        console.error('Error loading game data:', error);
        // Fallback –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        gameData = {
            levels: [
                {
                    name: "-at, -ad",
                    words: [
                        {word: "RAT", lowercase: "rat", image: "../../assets/images/words/rat.png", variants: ["rat", "cat", "bat", "hat"]},
                        {word: "CAT", lowercase: "cat", image: "../../assets/images/words/cat.png", variants: ["cat", "hat", "bat", "rat"]}
                    ]
                }
            ]
        };
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–ª–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
function getWordsForLevel(level) {
    let allWords = [];
    
    // –î–ª—è —É—Ä–æ–≤–Ω—è 5 (—ç–∫–∑–∞–º–µ–Ω) –±–µ—Ä–µ–º –í–°–ï —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö 4 —É—Ä–æ–≤–Ω–µ–π
    if (level === 5) {
        for (let i = 0; i < gameData.levels.length; i++) {
            // –î–ª—è —Å–ª–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º lowercase
            const levelWords = gameData.levels[i].words.map(wordData => ({
                ...wordData,
                displayWord: wordData.lowercase, // –í—Å–µ —Å–ª–æ–≤–∞ –≤ lowercase –¥–ª—è —ç–∫–∑–∞–º–µ–Ω–∞
                isNew: false
            }));
            allWords = allWords.concat(levelWords);
        }
    } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (1-4) –±–µ—Ä–µ–º —Å–ª–æ–≤–∞ –∏–∑ –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π + —Ç–µ–∫—É—â–µ–≥–æ
        for (let i = 0; i < level; i++) {
            const levelWords = gameData.levels[i].words.map(wordData => ({
                ...wordData,
                // –°–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è - –≤ UPPERCASE, –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö - –≤ lowercase
                displayWord: i === (level - 1) ? wordData.word : wordData.lowercase,
                isNew: i === (level - 1) // –ü–æ–º–µ—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
            }));
            allWords = allWords.concat(levelWords);
        }
    }
    
    return allWords;
}

// –ù–∞—á–∞–ª–æ —É—Ä–æ–≤–Ω—è
function startLevel(level) {
    if (!gameData) {
        console.error('Game data not loaded');
        return;
    }

    currentLevel = level - 1;
    currentWordIndex = 0;
    score = 0;
    progressDots = [];
    answers = [];
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ–º
    currentWords = getWordsForLevel(level);
    
    console.log(`–£—Ä–æ–≤–µ–Ω—å ${level}: –¥–æ—Å—Ç—É–ø–Ω–æ ${currentWords.length} —Å–ª–æ–≤`);
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ª–æ–≤–∞ - –í–°–ï —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã
    currentWords = shuffleArray(currentWords);
    
    // –î–ª—è –í–°–ï–• —É—Ä–æ–≤–Ω–µ–π –±–µ—Ä–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞
    totalWords = currentWords.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    document.getElementById('levelSelect').style.display = 'none';
    document.getElementById('gameScreen').style.display = 'block';
    
    if (level === 5) {
        document.getElementById('levelInfo').textContent = `–£—Ä–æ–≤–µ–Ω—å 5: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞-—ç–∫–∑–∞–º–µ–Ω (${totalWords} —Å–ª–æ–≤)`;
    } else {
        document.getElementById('levelInfo').textContent = `–£—Ä–æ–≤–µ–Ω—å ${level}: ${gameData.levels[currentLevel].name} (${totalWords} —Å–ª–æ–≤)`;
    }
    
    createProgressDots();
    showNextWord();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–∂–æ—á–∫–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function createProgressDots() {
    const progressDotsContainer = document.getElementById('progressDots');
    progressDotsContainer.innerHTML = '';
    progressDots = [];
    
    for (let i = 0; i < totalWords; i++) {
        const dot = document.createElement('div');
        dot.className = 'progress-dot';
        if (i === 0) {
            dot.classList.add('current');
        }
        progressDotsContainer.appendChild(dot);
        progressDots.push(dot);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
function showNextWord() {
    if (currentWordIndex >= totalWords) {
        showResult();
        return;
    }

    currentWordData = currentWords[currentWordIndex];
    const wordElement = document.getElementById('currentWord');
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ª–æ–≤–æ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –±—É–∫–≤—ã A
    const formattedWord = formatWordWithHighlight(currentWordData.displayWord || currentWordData.word);
    wordElement.innerHTML = formattedWord;
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
    createImageCards(currentWordData);
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞ —Å–ª–æ–≤–∞
function playWordSound() {
    if (!currentWordData) return;
    
    const wordToPlay = currentWordData.lowercase;
    const wordSound = new Audio(`../../assets/audio/words/${wordToPlay}.mp3`);
    wordSound.volume = 0.8;
    
    wordSound.play().catch(e => {
        console.log('Audio play error:', e);
        // Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—É—Ç—å
        const fallbackSound = new Audio(`../../assets/audio/words/${wordToPlay}.wav`);
        fallbackSound.volume = 0.8;
        fallbackSound.play().catch(e2 => {
            console.log('Fallback audio also failed:', e2);
        });
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
function toggleSound() {
    soundEnabled = !soundEnabled;
    const soundToggleIcon = document.getElementById('soundToggleIcon');
    const soundToggleText = document.getElementById('soundToggleText');
    
    if (soundEnabled) {
        soundToggleIcon.src = '../../assets/icon/sound-on.png';
        soundToggleText.textContent = '–í–∫–ª';
        soundToggle.title = '–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –æ—Ç–≤–µ—Ç–æ–≤';
    } else {
        soundToggleIcon.src = '../../assets/icon/sound-off.png';
        soundToggleText.textContent = '–í—ã–∫–ª';
        soundToggle.title = '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫ –æ—Ç–≤–µ—Ç–æ–≤';
    }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –±—É–∫–≤—ã A
function formatWordWithHighlight(word) {
    let result = '';
    const wordToFormat = word.toLowerCase(); // –í—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ–º —Å lowercase –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    
    for (let i = 0; i < wordToFormat.length; i++) {
        const char = wordToFormat[i];
        if (char === 'a') {
            result += `<span class="sound-a">${word[i] || char}</span>`;
        } else {
            result += word[i] || char;
        }
    }
    
    return result;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
function createImageCards(wordData) {
    const imagesGrid = document.getElementById('imagesGrid');
    imagesGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (4 –∫–∞—Ä—Ç–æ—á–∫–∏)
    const variants = shuffleArray([...wordData.variants]);
    const correctVariant = wordData.lowercase;
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –µ—Å—Ç—å —Å—Ä–µ–¥–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    if (!variants.includes(correctVariant)) {
        variants[0] = correctVariant;
    }
    
    variants.forEach(variant => {
        const card = document.createElement('div');
        card.className = 'image-card';
        card.onclick = () => checkAnswer(variant === correctVariant, card, correctVariant);
        
        const imageDiv = document.createElement('div');
        imageDiv.className = 'card-image';
        
        // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const img = document.createElement('img');
        img.src = `../../assets/images/words/${variant}.png`;
        img.alt = variant;
        img.onerror = function() {
            // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–º–æ–¥–∑–∏
            this.style.display = 'none';
            const emoji = document.createElement('div');
            emoji.className = 'fallback-emoji';
            emoji.textContent = getEmojiForWord(variant);
            imageDiv.appendChild(emoji);
        };
        
        imageDiv.appendChild(img);
        card.appendChild(imageDiv);
        
        imagesGrid.appendChild(card);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ª–æ–≤–∞ (fallback)
function getEmojiForWord(word) {
    const emojiMap = {
        'rat': 'üêÄ', 'mat': 'üß∫', 'hat': 'üé©', 'fat': 'üêñ', 'cat': 'üê±', 'bat': 'ü¶á',
        'dad': 'üë®', 'bad': 'üò†', 'sad': 'üò¢', 'glad': 'üòä', 'bag': 'üéí', 'mag': 'üì∞',
        'flag': 'üö©', 'crab': 'ü¶Ä', 'cab': 'üöï', 'pan': 'üç≥', 'hand': '‚úã', 'land': 'üèùÔ∏è',
        'sand': 'üèñÔ∏è', 'ham': 'üçñ', 'jam': 'üçì', 'lamp': 'üí°', 'black': '‚ö´', 'back': 'üîô',
        'snack': 'üç™', 'rag': 'üßπ', 'tag': 'üè∑Ô∏è', 'wag': 'üêï', 'grab': '‚úä', 'drab': 'üé®',
        'stab': 'üó°Ô∏è', 'tab': 'üìë', 'lab': 'üî¨', 'can': 'ü•´', 'man': 'üë®', 'fan': 'üåÄ',
        'band': 'üé∏', 'ram': 'üêè', 'dam': 'üõë', 'camp': '‚õ∫', 'damp': 'üíß', 'ramp': 'üõπ',
        'sack': 'üéí', 'pack': 'üì¶', 'rack': 'üóÑÔ∏è', 'track': 'üéØ', 'drag': 'üêâ', 'stag': 'ü¶å'
    };
    return emojiMap[word] || '‚ùì';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
function checkAnswer(isCorrect, card, correctWord) {
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const imagesGrid = document.getElementById('imagesGrid');
    imagesGrid.style.pointerEvents = 'none';
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤–µ—Ç–∞
    answers[currentWordIndex] = isCorrect;
    
    if (isCorrect) {
        card.classList.add('correct');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (soundEnabled) {
            const correctSound = new Audio("../../assets/audio/sounds/correct.mp3");
            correctSound.volume = 0.7;
            correctSound.play().catch(e => {
                // Fallback –ø—É—Ç—å
                const fallbackSound = new Audio("../../assets/audio/sounds/correct.mp3");
                fallbackSound.volume = 0.7;
                fallbackSound.play();
            });
        }
        
        score++;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –Ω–∞ –∑–µ–ª–µ–Ω—ã–π
        progressDots[currentWordIndex].classList.remove('current');
        progressDots[currentWordIndex].classList.add('correct');
    } else {
        card.classList.add('wrong');
        
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (soundEnabled) {
            const wrongSound = new Audio("../../assets/audio/sounds/wrong.mp3");
            wrongSound.volume = 0.7;
            wrongSound.play().catch(e => {
                // Fallback –ø—É—Ç—å
                const fallbackSound = new Audio("../../assets/audio/sounds/wrong.mp3");
                fallbackSound.volume = 0.7;
                fallbackSound.play();
            });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π
        progressDots[currentWordIndex].classList.remove('current');
        progressDots[currentWordIndex].classList.add('wrong');
    }
    
    setTimeout(() => {
        currentWordIndex++;
        if (currentWordIndex < totalWords) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫—Ä—É–∂–æ—á–µ–∫ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
            progressDots[currentWordIndex].classList.add('current');
        }
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
        imagesGrid.style.pointerEvents = 'auto';
        showNextWord();
    }, 1500); // –£–≤–µ–ª–∏—á–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 1.5 —Å–µ–∫—É–Ω–¥
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
function showResult() {
    const overlay = document.getElementById('resultOverlay');
    const resultImage = document.getElementById('resultImage');
    const resultTitle = document.getElementById('resultTitle');
    const resultStats = document.getElementById('resultStats');
    const nextButton = document.getElementById('nextButton');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const percentage = (score / totalWords) * 100;
    
    if (percentage >= 80) {
        resultImage.src = '../../assets/icon/result-success.png';
        resultTitle.textContent = '–û—Ç–ª–∏—á–Ω–æ!';
        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (soundEnabled) {
            const applauseSound = new Audio("../../assets/audio/sounds/applause.mp3");
            applauseSound.volume = 0.7;
            applauseSound.play().catch(e => {
                // Fallback –ø—É—Ç—å
                const fallbackSound = new Audio("../../assets/audio/sounds/applause.mp3");
                fallbackSound.volume = 0.7;
                fallbackSound.play();
            });
        }
    } else if (percentage >= 60) {
        resultImage.src = '../../assets/icon/result-good.png';
        resultTitle.textContent = '–•–æ—Ä–æ—à–æ!';
    } else {
        resultImage.src = '../../assets/icon/result-try-again.png';
        resultTitle.textContent = '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!';
    }
    
    resultStats.textContent = `${score} –∏–∑ ${totalWords} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ"
    if (currentLevel === 4) {
        nextButton.textContent = '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–≥—Ä–∞–º';
        nextButton.onclick = () => window.location.href = 'games-1.html';
    } else {
        nextButton.textContent = '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å';
        nextButton.onclick = nextLevel;
    }
    
    overlay.style.display = 'flex';
}

// –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function closeResult() {
    document.getElementById('resultOverlay').style.display = 'none';
}

// –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —É—Ä–æ–≤–Ω–µ–π
function backToMenu() {
    document.getElementById('gameScreen').style.display = 'none';
    document.getElementById('levelSelect').style.display = 'block';
    closeResult();
}

// –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
function retryLevel() {
    closeResult();
    startLevel(currentLevel + 1);
}

// –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
function nextLevel() {
    closeResult();
    if (currentLevel < 4) {
        startLevel(currentLevel + 2);
    } else {
        window.location.href = 'games-1.html';
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function shuffleArray(array) {
    const newArray = [...array];
    for (let i = newArray.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
    }
    return newArray;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
    loadGameData();
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    document.getElementById('soundButton').addEventListener('click', playWordSound);
    document.getElementById('soundToggle').addEventListener('click', toggleSound);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
    document.getElementById('resultOverlay').addEventListener('click', function(e) {
        if (e.target === this) {
            closeResult();
        }
    });
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ
    const correctSound = new Audio("../../assets/audio/sounds/correct.mp3");
    const wrongSound = new Audio("../../assets/audio/sounds/wrong.mp3");
    const applauseSound = new Audio("../../assets/audio/sounds/applause.mp3");
    
    correctSound.preload = 'auto';
    wrongSound.preload = 'auto';
    applauseSound.preload = 'auto';
});